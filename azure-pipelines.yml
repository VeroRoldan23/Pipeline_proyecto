trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
# Paso 1: Compilar y testear con Maven
- task: Maven@4
  displayName: 'Build con Maven'
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean package'
    codeCoverageToolOption: 'JaCoCo'

# Paso 2: Verificar que se generó el JAR
- script: |
    echo "Buscando archivos .jar generados:"
    find $(Build.SourcesDirectory) -name "*.jar"
  displayName: 'Verificar .jar generado'

# Paso 3: Copiar JAR al staging para publicación
- task: CopyFiles@2
  displayName: 'Copiar .jar a carpeta drop'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '**/target/*.jar'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/drop'
    CleanTargetFolder: true

# Paso 4: Publicar artefacto para otros stages o despliegue
- task: PublishBuildArtifacts@1
  displayName: 'Publicar artefacto: drop'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/drop'
    ArtifactName: 'drop'
    publishLocation: 'Container'

# Paso 5: Desplegar a Azure Web App
- task: AzureWebApp@1
  displayName: 'Deploy a Azure Web App'
  inputs:
    azureSubscription: 'AzureForStudentsConnection'  # Asegúrate que el nombre del servicio de conexión es correcto
    appName: 'ApiEmpleados'
    package: '$(Build.ArtifactStagingDirectory)/drop/*.jar'
